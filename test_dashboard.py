#!/usr/bin/env python3
"""
Test Dashboard for modal-for-noobs HuggingFace Spaces Compatibility
==================================================================

This script tests the exact same import and usage pattern that would be used
in HuggingFace Spaces to ensure the f-string syntax fixes work correctly.
"""

import sys
import os
from pathlib import Path

def main():
    """Main test function replicating HuggingFace Spaces usage."""
    
    print("=" * 60)
    print("üöÄ Modal-for-Noobs HuggingFace Spaces Compatibility Test")
    print("=" * 60)
    
    # Add the source directory to Python path for development testing
    current_dir = Path(__file__).parent
    src_dir = current_dir / "src"
    if src_dir.exists():
        sys.path.insert(0, str(src_dir))
    
    try:
        print("\nüì¶ Step 1: Testing critical imports...")
        
        # This is the exact import that was failing in HuggingFace Spaces
        from modal_for_noobs.dashboard import ModalDashboard
        print("‚úÖ ModalDashboard import successful!")
        
        # Test other critical imports
        from modal_for_noobs.cli_helpers.common import MODAL_BLACK, MODAL_DARK_GREEN, MODAL_GREEN, MODAL_LIGHT_GREEN
        print("‚úÖ CLI helpers imports successful!")
        
        from modal_for_noobs.cli import main
        print("‚úÖ CLI import successful!")
        
        from modal_for_noobs.modal_deploy import ModalDeployer
        print("‚úÖ ModalDeployer import successful!")
        
        print("\nüéõÔ∏è Step 2: Testing dashboard creation...")
        
        # Create the dashboard instance (this is what HuggingFace Spaces does)
        dashboard = ModalDashboard()
        print("‚úÖ Dashboard instance created successfully!")
        
        # Test interface creation
        demo = dashboard.create_interface()
        print("‚úÖ Gradio interface created successfully!")
        
        # Test that the interface has the expected properties
        assert hasattr(demo, 'title'), "Interface should have title attribute"
        assert hasattr(demo, 'launch'), "Interface should have launch method"
        print("‚úÖ Interface has all required attributes!")
        
        print("\nüîß Step 3: Testing template system...")
        
        # Test template constants (the new safe system)
        from modal_for_noobs.templates.template_constants import (
            MODAL_IMPORTS,
            GRADIO_DETECTION,
            MARIMO_NOTEBOOK_HEADER
        )
        print("‚úÖ Template constants imported successfully!")
        
        # Verify no f-string issues
        assert isinstance(MODAL_IMPORTS, str) and len(MODAL_IMPORTS) > 0
        assert isinstance(GRADIO_DETECTION, str) and len(GRADIO_DETECTION) > 0
        print("‚úÖ Template constants are valid!")
        
        print("\nüß™ Step 4: Testing f-string fixes...")
        
        # Test the specific fix that was causing issues
        test_content = "package1\npackage2\npackage3\npackage4\npackage5\npackage6"
        newline_char = "\n"  # Extract outside f-string
        req_lines = test_content.split(newline_char)
        if len(req_lines) > 5:
            remaining_packages = len(req_lines) - 5  # Calculate outside f-string
            result = f"    ... and {remaining_packages} more packages"
            print(f"‚úÖ F-string test result: '{result}'")
        
        print("\nüé® Step 5: Testing Modal theme colors...")
        
        # Test that Modal colors are accessible and valid
        print(f"‚úÖ MODAL_GREEN: {MODAL_GREEN}")
        print(f"‚úÖ MODAL_LIGHT_GREEN: {MODAL_LIGHT_GREEN}")
        print(f"‚úÖ MODAL_DARK_GREEN: {MODAL_DARK_GREEN}")
        print(f"‚úÖ MODAL_BLACK: {MODAL_BLACK}")
        
        print("\nüèÅ Step 6: Final HuggingFace Spaces simulation...")
        
        # Simulate the exact workflow from your original wrapper
        try:
            # This is what your wrapper was trying to do
            dashboard_instance = ModalDashboard()
            gradio_interface = dashboard_instance.create_interface()
            
            # Configure for HuggingFace Spaces (simulation)
            gradio_interface.title = "üöÄ Modal-for-Noobs: AI Agent Dashboard"
            gradio_interface.description = """
            ## ü§ñ Intelligent Cloud Deployment Agent
            
            This AI-powered agent automatically deploys your applications from HuggingFace Spaces to Modal's cloud infrastructure. 
            Simply provide a HuggingFace Spaces URL, and watch the agent intelligently migrate, optimize, and deploy your app!
            """
            
            print("‚úÖ HuggingFace Spaces configuration successful!")
            
            # Test that we can access launch method (but don't actually launch)
            assert callable(gradio_interface.launch), "Launch method should be callable"
            print("‚úÖ Launch method is ready!")
            
        except Exception as e:
            print(f"‚ùå HuggingFace Spaces simulation failed: {e}")
            raise
        
        print("\n" + "=" * 60)
        print("üéâ SUCCESS! ALL TESTS PASSED!")
        print("=" * 60)
        print("‚ú® The f-string syntax errors have been completely resolved!")
        print("üöÄ modal-for-noobs v0.2.5 is ready for HuggingFace Spaces!")
        print("üì¶ Your original import error should now be fixed.")
        print("")
        print("üîó Next steps:")
        print("  1. Install: pip install modal-for-noobs==0.2.5")
        print("  2. Use in HF Spaces: from modal_for_noobs.dashboard import ModalDashboard")
        print("  3. Deploy your Gradio apps to Modal with ease!")
        print("=" * 60)
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import Error: {e}")
        print("üí° This indicates the f-string syntax issues are still present.")
        return False
        
    except Exception as e:
        print(f"‚ùå Unexpected Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    
    if success:
        print("\nüéØ READY FOR DEPLOYMENT!")
        sys.exit(0)
    else:
        print("\n‚ùå TESTS FAILED - Package needs more fixes")
        sys.exit(1)