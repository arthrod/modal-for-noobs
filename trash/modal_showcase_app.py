# 🚀 Modal Deployment Script (Async Generated)
# Generated by modal-for-noobs - https://github.com/arthrod/modal-for-noobs
# Deployment Mode: minimum
# Following Modal's technical design philosophy for high-performance cloud computing
# Timeout: 3600s | Scaledown: 1200s

import modal
from fastapi import FastAPI
import gradio as gr
from gradio.routes import mount_gradio_app

# 🎯 Create Modal App with semantic naming
app = modal.App("modal-for-noobs-showcase_app")

# 🐳 Container Image Configuration
# Optimized for minimum workloads with performance-tuned dependencies
image = modal.Image.debian_slim(python_version="3.11").pip_install(
    "gradio",
    "fastapi[standard]",
    "uvicorn",
    "httpx",
    "markdown2"
)

# 📦 Original Gradio Application Code
# Embedded for seamless execution in Modal's cloud infrastructure
"""🎯 Modal Showcase App - Demonstrates all the amazing features with beautiful Modal theming!
"""

import json
import secrets
import random
from datetime import datetime

import gradio as gr

# Try importing optional dependencies
try:
    import matplotlib.pyplot as plt
    import numpy as np
    HAS_MATPLOTLIB = True
except ImportError:
    HAS_MATPLOTLIB = False
    print("⚠️ matplotlib/numpy not available - plot generation will be disabled")

# Modal's official color palette from their website! 💚
MODAL_GREEN = "#7FEE64"  # Primary brand green (RGB: 127, 238, 100)
MODAL_LIGHT_GREEN = "#DDFFDC"  # Light green tint (RGB: 221, 255, 220)
MODAL_DARK_GREEN = "#323835"  # Dark green accent (RGB: 50, 56, 53)
MODAL_BLACK = "#000000"  # Pure black background

# Custom CSS following Modal's dark-mode design philosophy
modal_css = f"""
/* MODAL-FOR-NOOBS SHOWCASE THEME - Following Modal's Design Philosophy */

/* Dark background foundation with high contrast */
.gradio-container {{
    background: linear-gradient(135deg, {MODAL_BLACK} 0%, {MODAL_DARK_GREEN} 100%);
    font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
    color: white;
}}

/* Vibrant green CTA buttons with Modal's signature style */
.gr-button {{
    background: {MODAL_GREEN} !important;
    border: none !important;
    color: {MODAL_BLACK} !important;  /* Black text on green for accessibility */
    font-weight: bold !important;
    border-radius: 8px !important;  /* Subtle rounded corners */
    box-shadow: 0 4px 15px rgba(127, 238, 100, 0.3) !important;
    transition: all 0.3s ease !important;
}}

/* Hover effects with subtle brightness adjustments */
.gr-button:hover {{
    background: {MODAL_LIGHT_GREEN} !important;
    transform: translateY(-1px) !important;
    box-shadow: 0 6px 20px rgba(127, 238, 100, 0.4) !important;
}}

/* High contrast typography with Modal's green accent */
h1 {{
    color: {MODAL_GREEN} !important;
    text-shadow: 0 2px 4px rgba(127, 238, 100, 0.3) !important;
    text-align: center !important;
    font-size: 2.5rem !important;
    font-weight: bold !important;
}}

/* Secondary text with light green tint */
h2, h3 {{
    color: {MODAL_LIGHT_GREEN} !important;
}}

/* Input fields with dark theme and green accents */
.gr-textbox input, .gr-slider input {{
    background: rgba(50, 56, 53, 0.8) !important;
    border: 1px solid {MODAL_GREEN} !important;
    color: white !important;
}}

/* Panel styling with subtle green borders */
.gr-panel {{
    background: rgba(50, 56, 53, 0.3) !important;
    border: 1px solid rgba(127, 238, 100, 0.2) !important;
    border-radius: 8px !important;
}}
"""

def analyze_sentiment(text):
    """Simulated sentiment analysis (in real deployment, would use transformers)."""
    if not text.strip():
        return "😐 Neutral", "Please enter some text!"

    # Simulate sentiment analysis
    positive_words = ["good", "great", "awesome", "fantastic", "amazing", "love", "excellent", "wonderful"]
    negative_words = ["bad", "terrible", "awful", "hate", "horrible", "disgusting", "worst"]

    text_lower = text.lower()
    pos_count = sum(word in text_lower for word in positive_words)
    neg_count = sum(word in text_lower for word in negative_words)

    if pos_count > neg_count:
        sentiment = "😊 Positive"
        confidence = min(0.95, 0.6 + (pos_count * 0.1))
    elif neg_count > pos_count:
        sentiment = "😢 Negative"
        confidence = min(0.95, 0.6 + (neg_count * 0.1))
    else:
        sentiment = "😐 Neutral"
        confidence = 0.5 + (secrets.randbelow(300) / 1000)

    result = f"**Sentiment:** {sentiment}\\n**Confidence:** {confidence:.2f}"

    return sentiment, result

def generate_plot():
    """Generate a beautiful plot with Modal theme."""
    if not HAS_MATPLOTLIB:
        # Return a simple text representation if matplotlib is not available
        return "📊 Plot generation requires matplotlib and numpy packages.\n\nTo enable plots, deploy with optimized mode:\n./mn.sh examples/showcase_app.py --optimized\n\nThis would show beautiful Modal-themed sine and cosine waves! 🌊💚"

    fig, ax = plt.subplots(figsize=(10, 6))

    # Generate sample data
    x = np.linspace(0, 10, 100)
    y1 = np.sin(x) * np.exp(-x/5)
    y2 = np.cos(x) * np.exp(-x/5)

    # Plot with Modal colors
    ax.plot(x, y1, color=MODAL_GREEN, linewidth=3, label='Modal Green Wave', alpha=0.8)
    ax.plot(x, y2, color=MODAL_LIGHT_GREEN, linewidth=3, label='Light Green Wave', alpha=0.8)

    ax.fill_between(x, y1, alpha=0.3, color=MODAL_GREEN)
    ax.fill_between(x, y2, alpha=0.3, color=MODAL_LIGHT_GREEN)

    ax.set_title('🚀 Modal-for-noobs Wave Function 💚', fontsize=16, fontweight='bold', color=MODAL_GREEN)
    ax.set_xlabel('Time (seconds)', fontweight='bold')
    ax.set_ylabel('Amplitude', fontweight='bold')
    ax.legend()
    ax.grid(True, alpha=0.3)

    # Style the plot
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['left'].set_color(MODAL_GREEN)
    ax.spines['bottom'].set_color(MODAL_GREEN)

    plt.tight_layout()
    return fig

def process_multilingual(text, language):
    """Process text in different languages."""
    greetings = {
        "English": f"Hello! You said: '{text}' 🚀",
        "Portuguese": f"Olá! Você disse: '{text}' 🇧🇷",
        "Spanish": f"¡Hola! Dijiste: '{text}' 🇪🇸",
        "French": f"Bonjour! Vous avez dit: '{text}' 🇫🇷",
        "German": f"Hallo! Sie sagten: '{text}' 🇩🇪"
    }

    responses = {
        "English": "This text has been processed with Modal-for-noobs power! ⚡",
        "Portuguese": "Este texto foi processado com o poder do Modal-for-noobs! ⚡ Huehuehue!",
        "Spanish": "¡Este texto ha sido procesado con el poder de Modal-for-noobs! ⚡",
        "French": "Ce texte a été traité avec la puissance de Modal-for-noobs! ⚡",
        "German": "Dieser Text wurde mit Modal-for-noobs Kraft verarbeitet! ⚡"
    }

    if not text.strip():
        return greetings.get(language, greetings["English"]).replace("You said: ''", "Please enter some text!")

    greeting = greetings.get(language, greetings["English"])
    response = responses.get(language, responses["English"])

    return f"{greeting}\\n\\n{response}"

def generate_modal_stats():
    """Generate fake but impressive Modal deployment stats."""
    stats = {
        "🚀 Total Deployments": 1000 + secrets.randbelow(9000),
        "⚡ Active Functions": 100 + secrets.randbelow(900),
        "💚 Success Rate": f"{98.5 + (secrets.randbelow(14) / 10):.1f}%",
        "🌍 Global Regions": 15 + secrets.randbelow(11),
        "⏱️ Avg Cold Start": f"{50 + secrets.randbelow(151)}ms",
        "📈 Uptime": f"{99.8 + (secrets.randbelow(19) / 100):.2f}%"
    }

    return "\\n".join([f"**{key}:** {value}" for key, value in stats.items()])

def create_showcase_interface():
    """Create the main showcase interface."""
    with gr.Blocks(css=modal_css, title="🚀💚 Modal-for-noobs Showcase 💚🚀") as demo:

        # Header
        gr.Markdown("""
        # 🚀💚 MODAL-FOR-NOOBS SHOWCASE 💚🚀
        ### *Demonstração completa das funcionalidades incríveis!*

        **🎯 FEATURES:** Sentiment Analysis | Plot Generation | Multilingual Support | Modal Stats

        *Deploy this app with: `./mn.sh examples/showcase_app.py --optimized`*
        """)

        with gr.Tabs():

            # Tab 1: Sentiment Analysis
            with gr.TabItem("🧠 Sentiment Analysis"):
                gr.Markdown("### 🧠 Analyze the sentiment of any text!")

                with gr.Row():
                    with gr.Column():
                        sentiment_input = gr.Textbox(
                            label="📝 Enter your text",
                            placeholder="Type something amazing about Modal-for-noobs!",
                            lines=3
                        )
                        sentiment_btn = gr.Button("🔍 Analyze Sentiment", variant="primary")

                    with gr.Column():
                        sentiment_result = gr.Textbox(label="📊 Analysis Result", lines=3)
                        sentiment_emoji = gr.Textbox(label="😊 Quick Result")

                sentiment_btn.click(
                    fn=analyze_sentiment,
                    inputs=sentiment_input,
                    outputs=[sentiment_emoji, sentiment_result]
                )

            # Tab 2: Plot Generation
            with gr.TabItem("📊 Plot Generation"):
                gr.Markdown("### 📊 Generate beautiful plots with Modal theme!")

                plot_btn = gr.Button("🎨 Generate Modal-themed Plot", variant="primary")

                if HAS_MATPLOTLIB:
                    plot_output = gr.Plot(label="📈 Your Beautiful Plot")
                else:
                    plot_output = gr.Textbox(label="📈 Plot Info", lines=5)

                plot_btn.click(fn=generate_plot, outputs=plot_output)

            # Tab 3: Multilingual Support
            with gr.TabItem("🌍 Multilingual"):
                gr.Markdown("### 🌍 Test multilingual support!")

                with gr.Row():
                    with gr.Column():
                        multilingual_text = gr.Textbox(
                            label="💬 Enter text in any language",
                            placeholder="Hello, Modal-for-noobs!",
                            lines=2
                        )
                        language_choice = gr.Dropdown(
                            choices=["English", "Portuguese", "Spanish", "French", "German"],
                            value="English",
                            label="🗣️ Choose Response Language"
                        )
                        multilingual_btn = gr.Button("🚀 Process Text", variant="primary")

                    with gr.Column():
                        multilingual_output = gr.Textbox(
                            label="🌟 Processed Result",
                            lines=4
                        )

                multilingual_btn.click(
                    fn=process_multilingual,
                    inputs=[multilingual_text, language_choice],
                    outputs=multilingual_output
                )

            # Tab 4: Modal Stats
            with gr.TabItem("📈 Modal Stats"):
                gr.Markdown("### 📈 Live Modal deployment statistics!")

                stats_btn = gr.Button("🔄 Refresh Stats", variant="primary")
                stats_output = gr.Textbox(
                    label="📊 Modal Platform Stats",
                    lines=8,
                    value=generate_modal_stats()
                )

                stats_btn.click(fn=generate_modal_stats, outputs=stats_output)

            # Tab 5: About
            with gr.TabItem("ℹ️ About"):
                gr.Markdown(f"""
                ## 🎯 About This Showcase

                This app demonstrates the power of **modal-for-noobs** - the easiest way to deploy Gradio apps to Modal!

                ### 🚀 What's Running Here:
                - **🎨 Modal Green Theme** - Beautiful signature green styling
                - **🧠 AI-powered Features** - Sentiment analysis simulation
                - **📊 Interactive Plots** - Matplotlib with Modal colors
                - **🌍 Multilingual Support** - 5+ languages supported
                - **📈 Live Stats** - Real-time deployment metrics
                - **⚡ Serverless Magic** - Running on Modal's infrastructure

                ### 🛠️ How to Deploy Your Own:

                1. **Quick Deploy:**
                ```bash
                ./mn.sh your_app.py --optimized
                ```

                2. **Wizard Mode:**
                ```bash
                ./mn.sh your_app.py --wizard
                ```

                3. **Brazilian Mode:**
                ```bash
                ./mn.sh your_app.py --br-huehuehue
                ```

                ### 💚 Features Demonstrated:
                - ✅ Zero-config deployment
                - ✅ Auto GPU detection
                - ✅ Beautiful Modal theming
                - ✅ Error handling
                - ✅ Async operations
                - ✅ Multi-language support

                ### 🔗 Links:
                - **GitHub:** [modal-for-noobs](https://github.com/arthrod/modal-for-noobs)
                - **Modal:** [modal.com](https://modal.com)
                - **Gradio:** [gradio.app](https://gradio.app)

                ---

                💚 **Made with <3 by [Neurotic Coder](https://github.com/arthrod) and assisted by Beloved Claude** ✨

                *Current time: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")} UTC*
                """)

        # Footer
        gr.Markdown("""
        ---
        🚀💚 **Powered by Modal-for-noobs** - Deploy like a boss, not like a noob! 💚🚀
        """)

    return demo

# Create the interface
demo = create_showcase_interface()

if __name__ == "__main__":
    print("🚀💚 MODAL-FOR-NOOBS SHOWCASE STARTING! 💚🚀")
    print("📱 This app demonstrates all the amazing features!")
    print("💚 Made with <3 by Neurotic Coder and assisted by Beloved Claude!")

    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False
    )


# ⚡ Modal Function Configuration
# Engineered for scalability, performance, and reliability
@app.function(
    image=image,
    min_containers=1,
    max_containers=1,  # Single container for session consistency and state management
    timeout=3600,  # Configurable timeout for workload requirements
    scaledown_window=1200,  # Optimized scale-down for cost efficiency
)
@modal.concurrent(max_inputs=100)  # High concurrency for production-grade performance
@modal.asgi_app()
def deploy_gradio():
    """
    Deploy Gradio app with Modal's high-performance infrastructure.
    
    This deployment function implements:
    - Smart Gradio interface detection using global scope analysis
    - FastAPI integration following Modal's ASGI architecture patterns
    - Performance optimization for concurrent request handling
    - Error handling and fallback mechanisms for production reliability
    """

    # 🔍 Smart Gradio Interface Detection
    # Using global scope analysis for maximum compatibility
    demo = None

    # Primary detection: Check common Gradio interface names
    if 'demo' in globals():
        demo = globals()['demo']
    elif 'app' in globals() and hasattr(globals()['app'], 'queue'):
        demo = globals()['app']
    elif 'interface' in globals():
        demo = globals()['interface']
    elif 'iface' in globals():
        demo = globals()['iface']

    # Fallback detection: Comprehensive global scope scan
    if demo is None:
        for var_name, var_value in globals().items():
            if hasattr(var_value, 'queue') and hasattr(var_value, 'launch'):
                demo = var_value
                break

    # 🚨 Fail-safe error handling with descriptive messaging
    if demo is None:
        raise ValueError(
            "Could not find Gradio interface in the application. "
            "Ensure your app defines a Gradio interface as 'demo', 'app', 'interface', or 'iface'."
        )

    # 🚀 Performance Configuration
    # Optimized queue size for responsiveness and throughput
    demo.queue(max_size=10)

    # 🔗 FastAPI Integration
    # Following Modal's recommended ASGI architecture patterns
    fastapi_app = FastAPI(
        title="Modal-for-noobs Gradio App",
        description="High-performance Gradio deployment on Modal cloud infrastructure",
        version="1.0.0",
        docs_url="/docs",  # Enable API documentation
        redoc_url="/redoc"  # Enable alternative API documentation
    )
    
    return mount_gradio_app(fastapi_app, demo, path="/")

# 🏃‍♂️ Direct execution support for local testing
if __name__ == "__main__":
    app.run()