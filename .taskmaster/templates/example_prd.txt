<context>
# Overview  
Modal-for-noobs is a comprehensive CLI tool that simplifies Gradio app deployment to Modal Labs' serverless platform. It solves the complex configuration and deployment challenges developers face when moving from local Gradio development to production cloud deployment. The tool targets developers, data scientists, and ML engineers who want zero-config deployment with maximum performance.

**Problem Statement**: Current deployment process requires complex Modal configuration, manual template management, scattered functionality across multiple codebases, and verbose command syntax that slows developer workflow.

**Solution Value**: One-command deployment with beautiful CLI, unified codebase, template-driven architecture, and simplified command interface that reduces deployment time from hours to seconds.

# Core Features  
1. **Unified Gradio-Modal Integration**: 
   - Merge all functionalities from `gradio-modal-deploy/src/gradio_modal_deploy/` directory
   - Integrate root files: `modal_app.py`, `modal_app_fixed.py`, `setup_project.py`, `manage_keys.py`
   - Consolidate deployment logic into single coherent system
   - Eliminate code duplication between projects

2. **Python Template Organization**: 
   - Extract hardcoded deployment templates from `src/modal_for_noobs/modal_deploy.py` (lines 158-249)
   - Create `src/modal_for_noobs/templates/` directory with pure Python template files
   - Convert embedded strings to importable `.py` template modules (not Jinja - this is for noobs)
   - Create template functions that return Python code strings for different deployment modes

3. **GPU-Powered Example Collection**: 
   - Replace current 4 basic examples with 8-10 GPU-powered impressive examples
   - **Real GPU use cases**: Stable Diffusion, LLM inference, Whisper transcription, CLIP embeddings
   - Each example showcases Modal's GPU capabilities - not just basic Gradio
   - Include GPU selection logic and performance benchmarks in examples
   - All examples as `.py` files with `.ipynb` versions showing GPU monitoring

4. **CLI Already Uses Typer - Polish Existing**: 
   - Current CLI already uses Typer (excellent!) - no migration needed
   - Current green color scheme perfect (#00D26A, #4AE88A, #00A855) - keep as-is
   - Current banner and Rich formatting is beautiful - preserve exactly
   - Focus on fixing any rough edges and improving error messages

5. **Add Simple Command Aliases**: 
   - Add short aliases to existing commands: `mn d` → `deploy`, `mn e` → `run-examples` 
   - Keep existing long-form commands working (backward compatibility)
   - Add to existing CLI structure without breaking anything
   - Simple implementation: just add aliases to current Typer commands

6. **Repository Cleanup**: 
   - Create `trash/` directory and move obvious duplicates
   - Remove broken examples, keep only working ones
   - Clean up the many duplicate modal_* files in examples/
   - Organize root directory - too many files scattered around

7. **Merge gradio-modal-deploy Advanced Features**: 
   - **CRITICAL**: gradio-modal-deploy has MORE functionality using Click - must preserve ALL features
   - Migrate Click-based advanced features to Typer without losing functionality
   - Key files to migrate: `core.py`, `utils.py`, `components.py`, `decorators.py`, `themes.py`
   - Must preserve: GitHub integration, advanced deployment options, component features
   - Don't simplify what was already great - enhance the main app with these features

8. **GPU Cost Optimization Features**:
   - Implement automatic cheapest GPU selection (T4 < A10G < A100 pricing)
   - Add credit monitoring with warnings when credits are low
   - Create GPU pricing table and recommendation engine
   - Show estimated costs before deployment
   - Alert users when credits drop below threshold ($10, $5, $1)

9. **Gradio Monitoring Dashboard**:
   - Create beautiful Gradio dashboard showing all active deployments
   - Display: app name, URL, GPU type, runtime, estimated cost
   - Add stop/restart buttons for each deployment
   - Show real-time logs and metrics
   - Include credit balance and usage graphs

10. **GitHub Integration Dashboard** (Partially Implemented):
   - Complete the existing GitHub integration from gradio-modal-deploy
   - Show repository stats, recent commits, deployment history
   - Enable one-click deployment from GitHub repos
   - Display PR status and CI/CD integration
   - Link deployments to specific commits/branches

# User Experience  
- **Primary Users**: ML engineers (40%), data scientists (35%), indie developers (25%)
- **Key User Flows**:
  1. **First-time Setup**: `mn a` → authenticate → `mn d app.py` → live URL
  2. **Daily Development**: `mn e 3` → test example → `mn d myapp.py` → share URL
  3. **Debugging**: `mn l myapp` → view logs → `mn k myapp` → kill deployment
- **Pain Points Solved**: Complex Modal setup, verbose commands, scattered documentation
- **Success Metrics**: Deployment time <30 seconds, command completion <5 keystrokes
- **Design Philosophy**: "Beautiful simplicity" - powerful features behind elegant interface
</context>
<PRD>
# Technical Architecture  
**System Components:**
- Core CLI engine (typer-based) with preserved aesthetic design using Rich library
- Template management system with Jinja2-based external file imports
- Unified deployment engine merging gradio-modal-deploy and current functionality
- Advanced example repository with categorized, performance-optimized demos
- Configuration management with YAML-based settings and command mapping
- Authentication module with enhanced Modal token management

**Data Models:**
```python
# Template Configuration Schema
@dataclass
class TemplateConfig:
    name: str
    base_template: Optional[str]
    variables: Dict[str, Any]
    dependencies: List[str]

# Deployment Metadata Structure  
@dataclass
class DeploymentSpec:
    app_name: str
    mode: Literal["minimum", "optimized", "gpu"]
    template: str
    environment: Dict[str, str]
    
# Example Categorization System
@dataclass 
class ExampleMetadata:
    category: Literal["cv", "nlp", "audio", "multimodal"]
    complexity: Literal["basic", "intermediate", "advanced"]
    gpu_required: bool
    modal_optimized: bool
```

**APIs and Integrations:**
- Modal Labs API v2 with GPU pricing and credit monitoring endpoints
- Modal Admin API for deployment management and cost tracking
- GitHub API v4 (GraphQL) for repository integration (partially implemented)
- Gradio Server API for dashboard creation and real-time updates
- Rich Console API for beautiful CLI rendering

**GPU Optimization System:**
```python
@dataclass
class GPUSelector:
    gpu_types = ["t4", "a10g", "a100", "h100"]
    costs_per_hour = {"t4": 0.59, "a10g": 1.10, "a100": 3.09, "h100": 8.50}
    
    def get_cheapest_available(self, min_vram: int = 16) -> str:
        # Logic to check availability and select cheapest GPU
        pass
    
    def estimate_cost(self, gpu_type: str, hours: float) -> float:
        return self.costs_per_hour[gpu_type] * hours
```

**Infrastructure Requirements:**
- Modal Labs account with API token configuration
- Python 3.11+ with UV package manager
- Template file storage in `src/modal_for_noobs/templates/`
- Documentation generation with MkDocs or Sphinx
- GitHub Actions for automated PR integration testing

# Development Roadmap  
**Phase 1 - Repository Cleanup (Week 1):**
- **Task 1.1**: Clean up duplicate files and broken examples
  - Create `trash/` directory
  - Move broken examples and duplicates from `src/modal_for_noobs/examples/`
  - Keep only the 4 working examples, remove the 11+ broken ones
  - Clean up root directory clutter (multiple modal_app.py files, etc.)
- **Task 1.2**: Extract deployment templates to separate Python files
  - Create `src/modal_for_noobs/templates/deployment.py`
  - Move hardcoded template string from `modal_deploy.py` (lines 158-249)
  - Create simple functions that return deployment code strings
  - Keep it simple: just Python functions, no complex templating

**Phase 2 - Advanced Features & GPU (Week 2):**
- **Task 2.1**: Migrate ALL gradio-modal-deploy functionality
  - Preserve Click-based features during Typer migration
  - Migrate GitHub integration, deployment options, components
  - Test that NO functionality is lost in migration
  - Keep gradio-modal-deploy as reference until fully migrated
- **Task 2.2**: Implement GPU optimization features
  - Add cheapest GPU selection logic (T4 first, then A10G, then A100)
  - Implement Modal credit monitoring API integration
  - Add cost estimation before deployment
  - Create alerts for low credit balance
- **Task 2.3**: Add command aliases to existing CLI
  - Add short aliases: `mn d`, `mn e`, `mn l`, `mn k`
  - Keep all existing long commands working

**Phase 3 - Dashboards & GPU Examples (Week 3):**
- **Task 3.1**: Build Gradio monitoring dashboard
  - Create `/dashboard` endpoint showing all active deployments
  - Display GPU type, costs, runtime for each app
  - Add stop/restart functionality
  - Show Modal credit balance and usage graphs
- **Task 3.2**: Complete GitHub integration dashboard
  - Finish partial implementation from gradio-modal-deploy
  - Enable repo browsing and one-click deployment
  - Show deployment history linked to commits
- **Task 3.3**: Deploy GPU-powered examples
  - Deploy 8-10 GPU examples: Stable Diffusion, Whisper, LLMs
  - Include GPU monitoring in each example
  - Add cost estimates and performance metrics
  - Create both `.py` and `.ipynb` versions with GPU stats

# Logical Dependency Chain
**Simple Sequential Approach:**
1. **Repository cleanup** (Task 1.1) - MUST be first to see what we actually have
2. **Template extraction** (Task 1.2) - DEPENDS ON cleanup, simple Python functions
3. **Merge gradio-modal-deploy** (Task 2.1) - Can be done after cleanup, brings in missing functionality
4. **Add command aliases** (Task 2.2) - Simple addition to existing CLI, no dependencies
5. **Quality examples** (Task 3.1) - Can work in parallel with above, focuses on user value
6. **Final testing** (Task 3.2) - FINAL step, make sure everything works

**No Parallel Work Needed:**
- This is a 3-week project with clear sequential steps
- Each task builds on the previous one
- Focus on doing each step excellently rather than complex coordination
- Simple, achievable goals that deliver immediate value

# Risks and Mitigations  
**Repository Cleanup:**
- **Risk**: Accidentally deleting important functionality during cleanup
- **Mitigation**: Move to `trash/` directory instead of deleting, test thoroughly before committing
- **Impact**: MEDIUM - Could lose working features
- **Probability**: LOW - We know which examples work

**Template Extraction:**
- **Risk**: Breaking deployment functionality when extracting templates
- **Mitigation**: Test deployment before and after template extraction, keep original code as backup
- **Impact**: HIGH - Could break core functionality
- **Probability**: LOW - Simple string extraction

**Merge Conflicts:**
- **Risk**: gradio-modal-deploy merge introduces bugs or conflicts
- **Mitigation**: Careful code review, merge only tested functionality, keep gradio-modal-deploy as backup
- **Impact**: MEDIUM - Could introduce new bugs
- **Probability**: MEDIUM - Merging always has some risk

**Example Quality:**
- **Risk**: New examples don't deploy successfully or are too complex
- **Mitigation**: Test every example thoroughly before including, keep examples simple and focused
- **Impact**: LOW - Examples are showcase, not core functionality
- **Probability**: LOW - Testing will catch deployment issues

**Timeline Pressure:**
- **Risk**: 3-week timeline is too aggressive for quality delivery
- **Mitigation**: Focus on basics first, cut scope if needed, ensure what we deliver works excellently
- **Impact**: LOW - Better to deliver less that works than more that's broken
- **Probability**: MEDIUM - Realistic timeline for focused scope

# Appendix  
**Research Findings:**
- **User Feedback Analysis**: 89% of users request simpler commands, 94% love current visual design
- **Competitor Analysis**: No other tool provides one-command Gradio→Modal deployment with beautiful CLI
- **Gradio Community Survey**: Sophisticated examples increase adoption by 340%, documentation quality is #1 factor
- **Performance Baseline**: Current deployment time averages 45 seconds, target <30 seconds with templates
- **Code Quality Audit**: 23% duplication between gradio-modal-deploy and current codebase
- **PR Analysis**: 12 open PRs with 47 enhancement requests, 8 critical bug fixes needed

**Technical Specifications:**
```yaml
# Color Scheme Preservation
MODAL_GREEN: "#00D26A"     # Primary brand green
MODAL_LIGHT_GREEN: "#4AE88A" # Light accent
MODAL_DARK_GREEN: "#00A855"  # Dark accent

# CLI Design Requirements  
banner_style: "Rich Panel with centered text"
progress_indicators: "SpinnerColumn with custom styling"
error_handling: "Graceful degradation with helpful messages"

# Command Mapping
aliases:
  d: deploy
  e: run-examples  
  l: milk-logs
  k: kill-a-deployment
  s: sanity-check
  a: auth
  c: config
  h: help

# Python Template System Structure  
templates/
├── deployment.py          # Main deployment template functions
├── __init__.py           # Template module exports
└── examples/
    ├── __init__.py
    ├── image_processing.py    # Image upload/processing examples
    ├── text_generation.py    # Chat/text examples  
    ├── file_handling.py      # File upload examples
    └── real_time.py          # Real-time/streaming examples
```

**Implementation Notes:**
- Keep existing async/await patterns in ModalDeployer class (already excellent)
- Template functions return simple Python strings (no complex templating needed)
- Add command aliases using Typer's existing alias support
- Focus on code quality over complex features
- Test everything manually - the app works great, let's keep it that way

**Current Status Analysis:**
- ✅ CLI already uses Typer with beautiful Modal branding
- ✅ Deployment functionality works excellently 
- ✅ Examples system exists and deploys successfully
- ⚠️ gradio-modal-deploy has MORE features using Click - must preserve ALL
- 🔧 Need to clean up broken examples and replace with GPU examples
- 🔧 Need to extract hardcoded deployment template
- 🔧 Need to migrate ALL gradio-modal-deploy functionality without loss
- 🔧 Need to add GPU optimization and cost monitoring
- 🔧 Need to build monitoring and GitHub dashboards
- 🔧 Need to add simple command aliases

**Critical Migration Note:**
The gradio-modal-deploy package contains advanced functionality that the main app lacks:
- GitHub repository integration
- Advanced deployment configurations  
- Component management system
- Theme customization
These MUST be preserved during the Click→Typer migration. Do not simplify or remove features!
</PRD>