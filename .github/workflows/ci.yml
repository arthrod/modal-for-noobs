name: 🚀💚 Modal-for-noobs CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"

jobs:
  # Run all checks with nox
  nox:
    name: 🧪 Test with Nox
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        session: [tests, lint, mypy, security]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: ⚡ Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          
      - name: 🐍 Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}
        
      - name: 📦 Install nox
        run: uv tool install nox --with nox-uv
        
      - name: 🔍 Run nox session
        run: uv tool run nox -s ${{ matrix.session }}
        
      - name: 📊 Upload coverage to Codecov
        if: matrix.session == 'tests' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Additional pytest tests for comprehensive coverage
  pytest:
    name: 🧬 Comprehensive Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: ⚡ Install uv
        uses: astral-sh/setup-uv@v3

      - name: 📦 Install dependencies
        run: |
          uv sync --all-extras --dev

      - name: 🧪 Run comprehensive test suite
        run: |
          uv run pytest src/tests/ -v --cov=modal_for_noobs --cov-report=xml --cov-report=term-missing --cov-report=html

      - name: 📊 Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/

  # Build package
  build:
    name: 🏗️ Build Package
    runs-on: ubuntu-latest
    needs: [nox, pytest]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ Install uv
        uses: astral-sh/setup-uv@v3

      - name: 🐍 Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: 📦 Build package
        run: |
          uv build

      - name: 🔍 Check package
        run: |
          uv tool run twine check dist/*

      - name: 📋 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Test installation
  test-install:
    name: 🔧 Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: 📦 Install package from wheel
        run: |
          pip install dist/*.whl

      - name: 🧪 Test CLI installation
        run: |
          python -c "from modal_for_noobs.cli import app; print('✅ CLI import successful')"
          python -m modal_for_noobs.cli --help

  # Publish to Test PyPI
  publish-test:
    name: 🚀 Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [build, test-install]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    environment: test-pypi

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: 🚀 Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

  # Publish to PyPI (production)
  publish-prod:
    name: 🌟 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build, test-install]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: 🌟 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Create GitHub Release
  create-release:
    name: 📋 Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-prod
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: 📋 Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build Docker image (only on main branch)
  build-docker:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [nox, pytest]
    runs-on: ubuntu-latest
    environment: production  # Requires environment protection
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🐳 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .devcontainer/Dockerfile.dev
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notification job
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [nox, pytest, build, test-install]
    if: always()

    steps:
      - name: 💚 Success Notification
        if: needs.nox.result == 'success' && needs.pytest.result == 'success' && needs.build.result == 'success'
        run: |
          echo "🎉 All checks passed! Modal-for-noobs is ready to rock! 💚🚀"

      - name: ❌ Failure Notification
        if: needs.nox.result == 'failure' || needs.pytest.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Some checks failed. Please review the logs."
          exit 1
